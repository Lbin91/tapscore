import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import '../widgets/option_card.dart';
import '../widgets/banner_ad_widget.dart';
import '../theme/app_colors.dart';
import '../models/score_option.dart';
import '../models/sports.dart';
import '../widgets/score_settings_dialog.dart';

class OptionScreen extends StatefulWidget {
  final Sport originalSport; // ÏõêÎ≥∏ Ïä§Ìè¨Ï∏† Í∞ùÏ≤¥

  const OptionScreen({
    Key? key,
    required this.originalSport,
  }) : super(key: key);

  @override
  State<OptionScreen> createState() => _OptionScreenState();
}

class _OptionScreenState extends State<OptionScreen> {
  late Sport sport; // ÏûëÏóÖÏö© Î≥µÏÇ¨Î≥∏ Ïä§Ìè¨Ï∏† Í∞ùÏ≤¥

  final List<ScoreOption> options = const [
    ScoreOption(
      id: 'official',
      name: 'options.official.name',
      icon: 'üìã',
      description: 'options.official.description',
    ),
    ScoreOption(
      id: 'single',
      name: 'options.single.name',
      icon: '1Ô∏è‚É£',
      description: 'options.single.description',
    ),
    ScoreOption(
      id: 'custom',
      name: 'options.custom.name',
      icon: '‚öôÔ∏è',
      description: 'options.custom.description',
    ),
  ];

  @override
  void initState() {
    super.initState();
    // ÏõêÎ≥∏ Sport Í∞ùÏ≤¥Ïùò Î≥µÏÇ¨Î≥∏ ÏÉùÏÑ±
    _createSportCopy();
  }

  // ÏõêÎ≥∏ Sport Í∞ùÏ≤¥Î°úÎ∂ÄÌÑ∞ Î≥µÏÇ¨Î≥∏ ÏÉùÏÑ±
  void _createSportCopy() {
    sport = Sport(
      name: widget.originalSport.name,
      icon: widget.originalSport.icon,
      id: widget.originalSport.id,
      maxRound: widget.originalSport.maxRound,
      scorePerRound: widget.originalSport.scorePerRound,
    );

    // Ï¢ÖÎ™©Î≥Ñ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    _setDefaultSettings();
  }

  // Ï¢ÖÎ™©Î≥Ñ Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö©
  void _setDefaultSettings() {
    // Ïä§Ìè¨Ï∏†Ïóê Îî∞Îùº Í∏∞Î≥∏ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
    if (sport.name == 'Î∞∞ÎìúÎØºÌÑ¥') {
      sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 21);
    } else if (sport.name == 'ÌÉÅÍµ¨') {
      sport.updateRoundSettings(newMaxRound: 5, newScorePerRound: 11);
    } else if (sport.name == 'ÌîºÌÅ¥Î≥º') {
      sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 11);
    } else {
      sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 21);
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        // Îí§Î°úÍ∞ÄÍ∏∞ Ïãú ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
        return true;
      },
      child: Scaffold(
        backgroundColor: AppColors.backgroundColor,
        appBar: _buildAppBar(),
        body: _buildBody(context),
      ),
    );
  }

  // Î©îÏù∏ ÌôîÎ©¥Ïùò bodyÎ•º Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // ÏòµÏÖò Ïπ¥Îìú Î™©Î°ùÍ≥º Í¥ëÍ≥† Î∞∞ÎÑàÎ•º Ìè¨Ìï®
  Widget _buildBody(BuildContext context) {
    // MediaQueryÎ•º ÌÜµÌï¥ ÌïòÎã® Ìå®Îî©Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Column(
      children: [
        Expanded(
          child: _buildOptionCards(context),
        ),
        Column(
          children: [
            const BannerAdWidget(type: BannerAdType.detail),
            SizedBox(height: bottomPadding), // ÌïòÎã® SafeArea ÏòÅÏó≠ÎßåÌÅº Ìå®Îî© Ï∂îÍ∞Ä
          ],
        ),
      ],
    );
  }

  // Ïï±Î∞îÎ•º Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Ïä§Ìè¨Ï∏† Ïù¥Î¶ÑÍ≥º Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùÑ Ìè¨Ìï®Ìïú ÏÉÅÎã®Î∞î Íµ¨ÏÑ±
  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: _buildAppBarTitle(),
      backgroundColor: AppColors.subMainColor,
      elevation: 4.0,
      iconTheme: IconThemeData(color: Colors.white),
    );
  }

  // Ïï±Î∞îÏùò ÌÉÄÏù¥ÌãÄÏùÑ Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Ïä§Ìè¨Ï∏† Ïù¥Î¶ÑÍ≥º Ï†êÏàò Î∞©Ïãù ÌÖçÏä§Ìä∏Î•º ÌëúÏãú
  Widget _buildAppBarTitle() {
    return Text(
      'dialog.settings.title'.tr(args: [sport.name.tr()]),
      style: TextStyle(
        color: AppColors.subMainTitleColor,
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    );
  }

  // ÏòµÏÖò Ïπ¥ÎìúÎì§Ïùò Ï†ÑÏ≤¥ Î†àÏù¥ÏïÑÏõÉÏùÑ Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Ìå®Îî©Í≥º Ïπ¥Îìú Î∞∞ÏπòÎ•º Îã¥Îãπ
  Widget _buildOptionCards(BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 18.0, vertical: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start, // ÏôºÏ™Ω Ï†ïÎ†¨ÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä
        children: [
          _buildOptionCardRow(context),
          SizedBox(height: 18),
          _buildSingleOptionCard(context),
        ],
      ),
    );
  }

  // Í∞úÎ≥Ñ ÏòµÏÖò Ïπ¥ÎìúÎ•º Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Ïπ¥ÎìúÏùò ÎπÑÏú®Í≥º ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨Î•º Îã¥Îãπ
  Widget _buildOptionCard(BuildContext context, ScoreOption option,
      {bool useExpanded = true}) {
    Widget card = AspectRatio(
      aspectRatio: 1,
      child: OptionCard(
        optionName: option.name,
        optionIcon: option.icon,
        onTap: () => _handleOptionSelected(context, option),
      ),
    );

    return useExpanded ? Expanded(child: card) : card;
  }

  // Ï≤´ Î≤àÏß∏ Ï§ÑÏùò ÏòµÏÖò Ïπ¥ÎìúÎì§ÏùÑ Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Í≥µÏãù Í∑úÏπôÍ≥º Îã®Ïùº ÎùºÏö¥Îìú Ïπ¥ÎìúÎ•º Í∞ÄÎ°úÎ°ú Î∞∞Ïπò
  Widget _buildOptionCardRow(BuildContext context) {
    return Row(
      children: [
        _buildOptionCard(context, options[0]),
        SizedBox(width: 18),
        _buildOptionCard(context, options[1]),
      ],
    );
  }

  // Îëê Î≤àÏß∏ Ï§ÑÏùò Îã®Ïùº ÏòµÏÖò Ïπ¥ÎìúÎ•º Íµ¨ÏÑ±ÌïòÎäî Î©îÏÜåÎìú
  // Ïª§Ïä§ÌÖÄ ÏòµÏÖò Ïπ¥ÎìúÎ•º ÌôîÎ©¥ Ï†àÎ∞ò ÌÅ¨Í∏∞Î°ú ÏôºÏ™Ω Ï†ïÎ†¨
  Widget _buildSingleOptionCard(BuildContext context) {
    return Align(
      alignment: Alignment.centerLeft, // ÏôºÏ™Ω Ï†ïÎ†¨
      child: SizedBox(
        width: (MediaQuery.of(context).size.width - 36) / 2,
        child: _buildOptionCard(context, options[2], useExpanded: false),
      ),
    );
  }

  // ÏòµÏÖò ÏÑ†ÌÉù Ïãú Ïä§ÎÇµÎ∞îÎ•º ÌëúÏãúÌïòÎäî Î©îÏÜåÎìú
  // ÏÑ†ÌÉùÎêú ÏòµÏÖòÏùò Ïù¥Î¶ÑÍ≥º Ìï®Íªò ÏïåÎ¶ºÏùÑ ÌëúÏãú
  void _showOptionSelectedSnackBar(BuildContext context, ScoreOption option) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('snackbar.settingsApplied'.tr(args: [option.name.tr()])),
        backgroundColor: AppColors.subMainColor,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8.0),
        ),
      ),
    );
  }

  void _handleOptionSelected(BuildContext context, ScoreOption option) {
    // ÏÑ†ÌÉùÎêú ÏòµÏÖòÏóê Îî∞Îùº Sport Í∞ùÏ≤¥Ïùò Í∏∞Î≥∏Í∞í Ïû¨ÏÑ§Ï†ï
    switch (option.id) {
      case 'official':
        // Í≥µÏãù Í∑úÏπô: Ï¢ÖÎ™©Î≥Ñ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        if (sport.name == 'Î∞∞ÎìúÎØºÌÑ¥') {
          sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 21);
        } else if (sport.name == 'ÌÉÅÍµ¨') {
          sport.updateRoundSettings(newMaxRound: 5, newScorePerRound: 11);
        } else if (sport.name == 'ÌîºÌÅ¥Î≥º') {
          sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 11);
        } else {
          sport.updateRoundSettings(newMaxRound: 3, newScorePerRound: 21);
        }
        break;
      case 'single':
        // Îã®Ïùº ÎùºÏö¥Îìú: Ï¢ÖÎ™©Î≥Ñ Ï†êÏàò ÏÑ§Ï†ï
        if (sport.name == 'Î∞∞ÎìúÎØºÌÑ¥') {
          sport.updateRoundSettings(newMaxRound: 1, newScorePerRound: 21);
        } else if (sport.name == 'ÌÉÅÍµ¨' || sport.name == 'ÌîºÌÅ¥Î≥º') {
          sport.updateRoundSettings(newMaxRound: 1, newScorePerRound: 11);
        } else {
          sport.updateRoundSettings(newMaxRound: 1, newScorePerRound: 21);
        }
        break;
      case 'custom':
        // Ïª§Ïä§ÌÖÄ: ÌòÑÏû¨ Í∞í Ïú†ÏßÄ
        break;
    }

    // ÏÑ†ÌÉùÎêú ÏòµÏÖòÏóê Îî∞Îùº ÏÑ§Ï†ï ÌåùÏóÖ ÌëúÏãú
    _showSettingsDialog(context, option);
  }

  void _showSettingsDialog(BuildContext context, ScoreOption option) {
    // Ïª§Ïä§ÌÖÄ ÏòµÏÖòÏù∏ Í≤ΩÏö∞ÏóêÎßå ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ï Í∞ÄÎä•ÌïòÎèÑÎ°ù Ìï®
    bool allowCustomSettings = option.id == 'custom';

    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black54,
      builder: (context) => ScoreSettingsDialog(
        sport: sport,
        option: option,
        allowCustomSettings: allowCustomSettings,
        onSettingsChanged: (maxRound, scorePerRound) {
          setState(() {
            sport.updateRoundSettings(
              newMaxRound: maxRound,
              newScorePerRound: scorePerRound,
            );
          });
          _showOptionSelectedSnackBar(context, option);
        },
      ),
    );
  }
}
